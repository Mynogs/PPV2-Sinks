-- 21.12.2018 11:23:24 AR V1.0a

block.setSize(51, 51)

generic = {
  parameter = {
    inputs = 1,
  },

  init = function(self)
    block.setInputsPinCount(self.parameter.inputs)
    for i = 1, self.parameter.inputs do
      block.setInputPinTypeRestrains(i, 'table')
    end
    block.setOutputsPinCount(0)
    block.modifyFlags('SupressStopFunctionCall', true)
  end,

  open = function(self)
    gui.add('Info', 'Info', 'Display', [[
Display a XY chart.
Input for every pin must be a array of an xy array:
{{x1, y1}, {x2, y2}, {x3, y3},... {xn, yn}}
    ]])
    gui.add('Edit', 'EditNumberOfInputs', 'Number of inputs')
    gui.set('EditNumberOfInputs', 'Integer', self.parameter.inputs)
    gui.setSize()
  end,

  apply = function(self)
    self.parameter.inputs = gui.get('EditNumberOfInputs', 'Integer')
    block.setInputsPinCount(self.parameter.inputs)
    for i = 1, self.parameter.inputs do
      block.setInputPinTypeRestrains(i, 'table')
    end
  end,

  close = function()
  end,

  avatar = function(self)
    local source =
[[
do
  local x0, y0 = w / 2, h / 2
  draw.setColorA(0, 0, 0)
  draw.box(2, 2, w - 3, h - 3)
  draw.setColorA(0.5, 0.5, 0.5)
  draw.line(0, y0, w, y0)
  draw.line(x0, 0, x0, h)
  local p = messagePack.unpack(token.get('.' .. self.uuid))
  if not p then
    p = {
      {
        color = {1, 1, 0},
        {-10, -10}, {12, 10}, {10, 20}
      },
      {
        color = {1, 0, 1},
        {14, 7}, {22, 10}, {4, 3}
      }
    }
  end
  for i = 1, #p do
    local xy = p[i]
    draw.setColorA(p[i].color or {1, 1, 1})
    for j = 1, #xy do
      local x, y = x0 + xy[j][1], y0 - xy[j][2]
      draw.line(x - 2, y, x + 3, y)
      draw.line(x, y - 2, x, y + 3)
    end
  end
end
]]
    return block.getDefaultAvatar(0x50, '', source)
  end,

  generate = function(self, remote)
    if remote then
      return nil
    end
    local source =
      [==[
        local block = {}

        block.start = function()
          block.messagePack = require 'messagePack'
          block.token = require 'token'
          block.colors = {
            {1, 1, 0},
            {1, 0, 1},
            {0, 1, 1},
            {1, 0, 0},
            {0, 1, 0},
            {0, 0, 1},
          }
        end

        block.step = function(...)
          local a = {...}
          for i = 1, #a do
            if not a.color then
              a[i].color = block.colors[(i - 1) % 6 + 1]
            end
          end
          block.token.set('.UUID', block.messagePack.pack(a))
        end

        return block
      ]==]
    local replaces = {
      ['UUID'] = block.getUUID(),
    }
    return string.gsub(source, '%a+', replaces)
  end,

}

